function FragmentTrackDye_02(Fragment,File)% Track dye in one fregment of the movie t0 = clock; QuitMatlabWhenFinished = true;%% load 'File' if it's not provided as an input variablewhile ~exist('File','var')    try        load('inprogress.mat','File');            catch        disp('error loading ''File'', retrying in 2 seconds')        pause(2);    end           enddisp([datestr(now),'   Dye analysis of fragment number ',num2str(Fragment),' of the movie: ''',File.MovieName,'''']);MoviePath      = File.MoviePath;MovieFileNames = File.MovieFileNames;% PixelSize      = File.PixelSize;              % PixelSize == # pixels per mm (1D length) FragmentFrames = File.DyeAnalysisFragmentFrames;RelevantFrames = FragmentFrames(Fragment,1):FragmentFrames(Fragment,2);       if     strcmpi(File.VideoFormat,'tiff')    VideoFormat   = 1;                                  % read new file every loop iteration     FileFullName  = [MoviePath,'\',MovieFileNames{RelevantFrames(1)}];     Mov           = imread(FileFullName);     elseif strcmpi(File.VideoFormat,'multi-tiff')    VideoFormat   = 2;    FileFullName  = [MoviePath,'\',MovieFileNames{1}];  % one file    Mov           = imread(FileFullName, RelevantFrames(1));     elseif strcmpi(File.VideoFormat,'avi')    VideoFormat   = 3;    FileFullName  = [MoviePath,'\',MovieFileNames{1}];  % one file    MovieObj      = VideoReader(FileFullName);          % one object    Mov           = read(MovieObj, RelevantFrames(1));         Mov           = Mov(:,:,1);                %%%% assuming 3 channel movie !!!!!!!!!!!!!!!!!!elseif strcmpi(File.VideoFormat,'multi-avi')    VideoFormat   = 4;    PreviousMovieObjFile = 0;                           % read new file object if and when it is needed     CurrentMovieObjFile = File.MultiAviFrameConversion.MovieFileNumber(RelevantFrames(1));    if (PreviousMovieObjFile ~= CurrentMovieObjFile)        % create a new file object if necessary        FileFullName        = [MoviePath,'\',MovieFileNames{CurrentMovieObjFile}];         PreviousMovieObjFile = CurrentMovieObjFile;        MovieObj             = VideoReader(FileFullName);    end    CurrentFrameNumberInFile = File.MultiAviFrameConversion.FrameNumberInFile(RelevantFrames(1));    Mov                      = read(MovieObj, CurrentFrameNumberInFile);         Mov                      = Mov(:,:,1);          %%%% assuming 3 channel movie !!!!!!!!!!!!!!!!!!      end          load(File.BackgroundFile, 'background');%% binning indices info - FREE PARAMETERS !!!!!!!!!!!!disp([datestr(now), '  Calculating frame binning indices']);YaxisLength                 = size(Mov,2);XaxisLength                 = size(Mov,1);binning.YaxisLength         = YaxisLength;binning.XaxisLength         = XaxisLength;binning.NumOfPixels_X       = 100;binning.NumOfPixels_Y       = 25;binning.NumOfBins_X         = round(XaxisLength/50);binning.NumOfBins_Y         = round(YaxisLength/10);binning.Intervals_X         = (XaxisLength-binning.NumOfPixels_X-1) /  (binning.NumOfBins_X-1);binning.Intervals_Y         = (YaxisLength-binning.NumOfPixels_Y-1) /  (binning.NumOfBins_Y-1);Xcoordinates                = round(repmat(1:binning.NumOfPixels_X,binning.NumOfBins_X,1)+ repmat((1:binning.Intervals_X:(XaxisLength-binning.NumOfPixels_X))',1,binning.NumOfPixels_X)-1);Ycoordinates                = round(repmat(1:binning.NumOfPixels_Y,binning.NumOfBins_Y,1)+ repmat((1:binning.Intervals_Y:(YaxisLength-binning.NumOfPixels_Y))',1,binning.NumOfPixels_Y)-1);binning.meanXcoordinates    = mean(Xcoordinates,2); binning.meanYcoordinates    = mean(Ycoordinates,2); LinearCoordinates_InFrame   = zeros(binning.NumOfBins_X,binning.NumOfBins_Y, binning.NumOfPixels_X*binning.NumOfPixels_Y,'single');h=waitbar(0);for x_ind = 1:binning.NumOfBins_X             waitbar(x_ind/binning.NumOfBins_X,h);    for y_ind = 1:binning.NumOfBins_Y        MAT = false(size(Mov));        MAT(Xcoordinates(x_ind,:),Ycoordinates(y_ind,:))=true;%                 CurrentLinearCoordinates = find(MAT(:));        LinearCoordinates_InFrame(x_ind,y_ind,:) =  find(MAT(:));    endendclose(h)clear hh_filter = fspecial('average', [3 6]) ; % % Use background matrix to decide whether the data is uint8 or uint16. DEFAULT IS uint16 !!!% X = whos('background'); % if strcmpi(X.class,'uint8')%     Use_uint8_for_patterns = true;% else%     Use_uint8_for_patterns = false;% end%% Find worm objects in each framedisp([datestr(now), '  Analyzing dye patterns in each frame', char(10)]);frame_index     = 0;PatternMatrix   = zeros(length(RelevantFrames),binning.NumOfBins_X,binning.NumOfBins_Y,'single');tic;for Frame = RelevantFrames         frame_index = frame_index+ 1;        %     Frame = 151200+ 20*60*6%     Frame = 151200+ 40*60*6%     Frame = 151200+ 50*60*6    %% Current frame analysis%     tic    switch VideoFormat        case 2                             % A single multiple-tiff file            Mov           = imread(FileFullName, Frame);             case 1                             % A sequence of tiff files            FileFullName  = [MoviePath,'\',MovieFileNames{Frame}];             Mov           = imread(FileFullName);                                  case 3                             % A single avi movie file            Mov           = read(MovieObj, Frame);                 Mov           = Mov(:,:,1);                %%%% assuming 3 channel movie !!!!!!!!!!!!!!!!!!        case 4                             % A sequence of avi movie files            CurrentMovieObjFile = File.MultiAviFrameConversion.MovieFileNumber(Frame);            if (PreviousMovieObjFile ~= CurrentMovieObjFile)        % create a new file object if necessary                FileFullName        = [MoviePath,'\',MovieFileNames{CurrentMovieObjFile}];                 PreviousMovieObjFile = CurrentMovieObjFile;                MovieObj             = VideoReader(FileFullName);            end            CurrentFrameNumberInFile = File.MultiAviFrameConversion.FrameNumberInFile(Frame);            Mov                      = read(MovieObj, CurrentFrameNumberInFile);                 Mov                      = Mov(:,:,1);          %%%% assuming 3 channel movie !!!!!!!!!!!!!!!!!!                                    end           Mov = imsubtract(single(background),single(Mov));  % signal (worms or dye) is positive, background is zero or negative.    Mov(Mov<0)=NaN;        % calculate dye pattern in each bin    FrameBins         = Mov(LinearCoordinates_InFrame);    % FrameBins is a 3-D matrix of size [ NumOfBins_X, NumOfBins_Y, (NumOfPixels_X * NumOfPixels_Y) ] ;    MedianOfFrameBins = nanmedian(FrameBins,3);            % MedianOfFrameBins and FilteredMedians are 2-D matrices of size [ NumOfBins_X, NumOfBins_Y ] ;    %     % Filter matrix before assigning to output variable%     FilteredMedians   = imfilter(MedianOfFrameBins,h_filter);%     PatternMatrix(frame_index,:,:) = FilteredMedians;    PatternMatrix(frame_index,:,:) = MedianOfFrameBins;     % NOT FILTERED !!!!!    %     toc    %     figure; imagesc(MedianOfFrameBins); colormap(gray); figure; imagesc(FilteredMedians); colormap(gray);%     figure; plot(MedianOfFrameBins(10,:),'b.');hold on; plot(FilteredMedians(10,:),'b-'); colormap(gray);        ProgressDisplay_and_Memory (FragmentFrames, Fragment, frame_index)       end%% SAVEFragmentSaveName = File.DyeAnalysisFragmentSaveNames{Fragment};       % save fragment informationsavesuccess = 0;while ~savesuccess    try        disp([datestr(now),' Saving Dye analysis data for Movie ''',File.MovieName,''', fragment ',num2str(Fragment)]);        save(FragmentSaveName, 'File', 'background','PatternMatrix','binning','-v7.3');                            disp([datestr(now),' *** Save complete *** ']);        savesuccess = 1;    catch        disp(' Error while saving... retrying');        lasterr        pause(10);    endend% update status filesavesuccess = 0;while ~savesuccess    try        load('inprogress.mat','File');         File.DyeCompletedFragments(Fragment) = true;        save('inprogress.mat','File','-append');           savesuccess = 1;        disp(' Status file updated');    catch        disp('error during ''File'' updating, retrying in 5 seconds')        pause(5);    end endt1=clock; disp([datestr(now),'  Total cpu time for this fragment = ',num2str(etime(t1,t0)/60),char(10),'Exiting Matlab session in 10 seconds'])pause(10)if QuitMatlabWhenFinished    quitendreturn%% inline functionsfunction background = getbackground_v04(File, Background_params)% This function is modified from the function getbackground_Fluor_v02% This function:%   Calculate the background from the median pixel levels rather than their means.    %   Uses gray scale pictures rather than a single channel.%-----------------------------------------------------------------------DirName     = File.MoviePath;FileNames   = File.MovieFileNames;FrameNum    = File.NumberOfFrames;  % This is the total number of frames in the movie, NOT the number of frames that are analyzed for background calculationMATSIZE     = File.FrameSize;if isfield(Background_params,'FrameInterval')   % Usually 50 frames    FrameInterval = Background_params.FrameInterval;else    FrameInterval = 50;endif isfield(Background_params,'method')          % mean or median over the frames?     method = Background_params.method;else    method = 'median';endif isfield(Background_params,'StartFrame')      % First frame     StartFrame = Background_params.StartFrame;else    StartFrame = 1;endif isfield(Background_params,'EndFrame')        % Last frame     EndFrame = Background_params.EndFrame;else    EndFrame = FrameNum;endif isfield(Background_params,'plot')            % plot background     plot_background = Background_params.plot;else    plot_background = false;end% Assign Movie Format Codeif     strcmpi(File.VideoFormat,'tiff')    VideoFormat   = 1;elseif strcmpi(File.VideoFormat,'multi-tiff')    VideoFormat   = 2;    FileFullName  = [DirName,'\',FileNames{1}]; elseif strcmpi(File.VideoFormat,'avi')    VideoFormat   = 3;    FileFullName  = [DirName,'\',FileNames{1}];     MovieObj      = VideoReader(FileFullName);elseif strcmpi(File.VideoFormat,'multi-avi')    VideoFormat   = 4;    PreviousMovieObjFile = 0; % read new file object if and when it is needed else    disp('unknown format. aborting @ background calculation ...');    returnenddisp(['Background calculating from ',int2str(StartFrame),' to ',int2str(EndFrame),' in increments of ',int2str(FrameInterval)]);NumOfFrames = round((EndFrame-StartFrame+1)/FrameInterval);progbars    = 10;if strcmpi(method,'median') || strcmpi(method,'percentile_10')        MaxAllowedNumOfFrames   = 100;    if NumOfFrames > MaxAllowedNumOfFrames        FrameInterval = round((EndFrame-StartFrame+1) / MaxAllowedNumOfFrames);        NumOfFrames   = round((EndFrame-StartFrame+1)/FrameInterval);        disp(['To avoid large computation time, FrameInterval is enlarged to ',int2str(FrameInterval)]);    end        cdata_mat   = uint16(zeros(MATSIZE(1),MATSIZE(2),NumOfFrames));    ind         = 0;    for Frame = StartFrame:FrameInterval:EndFrame        ind = ind+1;        % Read frame, depending on the video format        if VideoFormat==2                       % A single multiple-tiff file            Mov                = imread(FileFullName, Frame);             elseif VideoFormat==1                   % A sequence of tiff files            FileFullName       = [DirName,'\',FileNames{Frame}];             Mov                = imread(FileFullName);                                  elseif VideoFormat==3                   % A single avi movie file            Mov                = read(MovieObj, Frame);                 Mov                = Mov(:,:,1);                %%%% assuming 3 channel movie !!!!!!!!!!!!!!!!!!        elseif VideoFormat==4                   % A sequence of avi movie files            CurrentMovieObjFile = File.MultiAviFrameConversion.MovieFileNumber(Frame);                        if (PreviousMovieObjFile ~= CurrentMovieObjFile)        % create a new file object if necessary                FileFullName         = [DirName,'\',FileNames{CurrentMovieObjFile}];                 PreviousMovieObjFile = CurrentMovieObjFile;                MovieObj             = VideoReader(FileFullName);            end            CurrentFrameNumberInFile = File.MultiAviFrameConversion.FrameNumberInFile(Frame);            Mov                      = read(MovieObj, CurrentFrameNumberInFile);                 Mov                      = Mov(:,:,1);          %%%% assuming 3 channel movie !!!!!!!!!!!!!!!!!!                                   end                % store frame data        cdata_mat(:,:,ind) = Mov;              if mod(Frame * progbars,(EndFrame-StartFrame+1)) < progbars*FrameInterval     % Progress bar- 10x ':'            fprintf(':');         end        end    cdata_mat = single(cdata_mat);        fprintf('\nCalculating median\n');    cdatamean       = mean(cdata_mat,3);    background_mean = uint16(round(cdatamean));    cdatamedian       = median(cdata_mat,3);    background_median = uint16(round(cdatamedian));            if strcmpi(method,'median')         background = background_median;    elseif strcmpi(method,'percentile_10')        fprintf('\nCalculating percentile [10%] \n');        % prctile returns percentiles of the values in cdata along the 3rd dimention. p is a scalar or a vector of percent values.        % BEWARE!!! This is a Matlab Function but may be called to Dirk's one on the path !!         p                     = 10;        cdata_percentile      = prctile(double(cdata_mat),p,3);                     background_percentile = uint16(round(cdata_percentile));        background            = background_percentile;    end           if plot_background        figure('name','background');         if strcmpi(method,'percentile_10')            subplot(1,3,1); h(1)=imshow(background_mean,[]);       title('mean');               subplot(1,3,2); h(2)=imshow(background_median,[]);     title('median');             subplot(1,3,3); h(3)=imshow(background_percentile,[]); title([num2str(p),' percent']);         else            subplot(1,2,1); h(1)=imshow(background_mean,[]);       title('mean');               subplot(1,2,2); h(2)=imshow(background_median,[]);     title('median');         end                  % figure; imagesc(background_mean - background_median); colorbar; set(gca,'Clim',[0 10])    end    else   % MEAN    if ~strcmpi(method,'mean')             disp('Background calculation method is not properly defined. Using mean...');    end        MaxAllowedNumOfFrames   = 300;    if NumOfFrames > MaxAllowedNumOfFrames        FrameInterval = round((EndFrame-StartFrame+1) / MaxAllowedNumOfFrames);        NumOfFrames   = round((EndFrame-StartFrame+1)/FrameInterval);        disp(['To avoid large computation time, FrameInterval is enlarged to ',int2str(FrameInterval)]);    end        cdata_mat = single(zeros(MATSIZE));       for Frame = StartFrame:FrameInterval:EndFrame         % Read frame, depending on the video format         if VideoFormat==2                       % A single multiple-tiff file            Mov                = imread(FileFullName, Frame);             elseif VideoFormat==1                   % A sequence of tiff files            FileFullName      = [DirName,'\',FileNames{Frame}];             Mov                = imread(FileFullName);                                  elseif VideoFormat==3                   % A single avi movie file            Mov                = read(MovieObj, Frame);                 Mov                = Mov(:,:,1);                %%%% assuming 3 channel movie !!!!!!!!!!!!!!!!!!        elseif VideoFormat==4                   % A sequence of avi movie files            CurrentMovieObjFile = File.MultiAviFrameConversion.MovieFileNumber(Frame);            if (PreviousMovieObjFile ~= CurrentMovieObjFile)        % create a new file object if necessary                FileFullName        = [DirName,'\',FileNames{CurrentMovieObjFile}];                 PreviousMovieObjFile = CurrentMovieObjFile;                MovieObj             = VideoReader(FileFullName);            end            CurrentFrameNumberInFile = File.MultiAviFrameConversion.FrameNumberInFile(Frame);            Mov                      = read(MovieObj, CurrentFrameNumberInFile);                 Mov                      = Mov(:,:,1);          %%%% assuming 3 channel movie !!!!!!!!!!!!!!!!!!                                   end                % Add to previous frames        cdata_mat     = cdata_mat + single(Mov);        if mod(Frame * progbars,(EndFrame-StartFrame+1)) < progbars*FrameInterval     % Progress bar- 10x ':'            fprintf(':');         end        end    background = uint16(cdata_mat/NumOfFrames);    fprintf('\n');    if plot_background        figure('name','background (mean)'); %         imagesc(background);  set(gca,'Clim',[0 255]); title('mean');   colorbar        imshow (background,[]);  set(gca,'Clim',[0 255]); title('mean');   colorbar    endend% Transfer background to uint8 if movie was in uint8 formatX=whos('Mov'); CLASS = X.class;if strcmpi(CLASS,'uint8')    background = uint8(background);end%the following is necessary only if you want to save background image for later re-analysisif Background_params.save       [FileName,PathName] = uiputfile('*.bmp', 'Save Background Image');    if FileName ~= 0        imwrite(uint8(background),[PathName, FileName], 'bmp');    endend% imshow(background);% pause;returnfunction ProgressDisplay_and_Memory (FragmentFrames, Fragment, frame_index)                       TotalNumOfFrames = diff(FragmentFrames(Fragment,:));      if ~mod(frame_index, 10)           % units [1/frame]    t1         = toc; tic;    fps        = 10/t1;    EstimateTimeLeft = ((TotalNumOfFrames - frame_index)/fps)/60;  % in minutes    disp(['  fps=',num2str(fps),',  ',num2str(EstimateTimeLeft),' minutes left',char(10)])endif ~mod(frame_index,100)     % new line in workspace    fprintf('\n\n');     end% Command window displayswitch mod(frame_index,5)     case 0, fprintf('-');     case 1, fprintf('\b\\');     case 2, fprintf('\b|');     case 3, fprintf('\b/');     case 4, fprintf('\b='); %     case 5, fprintf('\b+'); endif ~mod(frame_index,100)     % new line in workspace    fprintf('\n\n');     endreturnfunction SaveAndUpdateStatus (File, Fragment, Settings, Tracks, background, AddProps) % Save Fragment Filesavesuccess = 0;while ~savesuccess    try        disp([datestr(now),' Saving Dye analysis data for Movie ''',File.MovieName,''', fragment ',num2str(Fragment)]);        save(FragmentSaveName, 'Tracks', 'background', 'ExpData', 'File', 'Tracks_smallstruct','Settings','-v7.3');        clear Tracks;        for ar = 1:File.NumArenas            Tracks    =  Tracks_smallstruct([Tracks_smallstruct.ArenaID]==ar);            save([FragmentSaveName(1:end-4),'_Arena',num2str(ar),'.mat'], 'Tracks', 'background', 'ExpData', 'File','Settings','-v7.3');         end                    disp([datestr(now),' *** Save complete *** ']);        savesuccess = 1;    catch        disp(' Error while saving... retrying');        lasterr        pause(10);    endend% Update status fileloadsuccess = 0;while ~loadsuccess     try        load(StatusFile,'File');        loadsuccess = 1;    catch        disp('Error loading status file.  Retrying...');        pause(5);    endend File.CompletedFragments(Fragment) = 1;% File.CompTime                     = now;success = false;while ~success    try        save(StatusFile,'File','-append');        disp('*** Status file updated ***');        success = true;    catch        disp('error saving status file. Retrying in 10 seconds');        pause(10);    endend        return